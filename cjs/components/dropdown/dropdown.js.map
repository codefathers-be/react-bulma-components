{"version":3,"sources":["../../../src/components/dropdown/dropdown.js"],"names":["Dropdown","className","children","value","color","align","right","up","hoverable","label","onChange","closeOnSelect","icon","domRef","disabled","menuId","props","ref","isOpen","setIsOpen","close","evt","current","contains","target","onSelect","selectedValue","window","addEventListener","removeEventListener","childrenArray","React","Children","map","child","i","type","DropdownItem","cloneElement","active","onClick","open","Item","Divider","DropdownDivider","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DropdownItem from './components/item';\nimport DropdownDivider from './components/divider';\nimport Button from '../button';\n\nimport Element from '../element';\n\nconst Dropdown = ({\n  className,\n  children,\n  value,\n  color,\n  align,\n  right,\n  up,\n  hoverable,\n  label,\n  onChange,\n  closeOnSelect,\n  icon,\n  domRef,\n  disabled,\n  menuId,\n  ...props\n}) => {\n  const ref = useRef(domRef);\n  const [isOpen, setIsOpen] = useState(false);\n  const close = (evt) => {\n    // IDK yet how to test using the ref in enzime\n    // istanbul ignore if\n    if (\n      hoverable ||\n      (evt && ref && ref.current && ref.current.contains(evt.target))\n    ) {\n      return;\n    }\n    if (ref.current) {\n      setIsOpen(false);\n    }\n  };\n\n  const onSelect = (selectedValue) => {\n    return () => {\n      if (onChange) {\n        onChange(selectedValue);\n      }\n      if (closeOnSelect) {\n        close();\n      }\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', close);\n    return () => {\n      window.removeEventListener('click', close);\n    };\n  }, []);\n\n  let current = label;\n\n  const childrenArray = React.Children.map(children, (child, i) => {\n    if (\n      child.type === DropdownItem &&\n      ((i === 0 && !label) || child.props.value === value)\n    ) {\n      current = child.props.children;\n    }\n    return React.cloneElement(\n      child,\n      child.type === DropdownItem\n        ? {\n            active: child.props.value === value,\n            onClick: onSelect(child.props.value),\n          }\n        : {},\n    );\n  });\n\n  return (\n    <Element\n      {...props}\n      domRef={ref}\n      className={classnames('dropdown', className, {\n        'is-active': isOpen,\n        'is-up': up,\n        'is-right': right || align === 'right',\n        'is-hoverable': hoverable,\n      })}\n    >\n      <div\n        className=\"dropdown-trigger\"\n        role=\"presentation\"\n        onClick={() => {\n          if (disabled) {\n            return;\n          }\n          setIsOpen((open) => {\n            return !open;\n          });\n        }}\n      >\n        <Button\n          disabled={disabled}\n          color={color}\n          aria-haspopup\n          aria-controls={menuId}\n        >\n          <span>{current}</span>\n          {icon}\n        </Button>\n      </div>\n      <div className=\"dropdown-menu\" id={menuId} role=\"menu\">\n        <div className=\"dropdown-content\">{childrenArray}</div>\n      </div>\n    </Element>\n  );\n};\n\nDropdown.Item = DropdownItem;\n\nDropdown.Divider = DropdownDivider;\n\nDropdown.propTypes = {\n  /**\n   * The value of the currently selected dropdown item. If this value match\n   * with the value passed to a Dropdown.item it will be used as label if the label prop its empty\n   */\n  value: PropTypes.any,\n  /**\n   * Called when a dropdown item is selected.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The color of the dropdown button.\n   */\n  color: PropTypes.oneOfType([\n    PropTypes.oneOf([\n      'primary',\n      'link',\n      'info',\n      'success',\n      'warning',\n      'danger',\n      'dark',\n      'text',\n    ]),\n    PropTypes.string,\n  ]),\n  disabled: PropTypes.bool,\n  /**\n   * Whether the dropdown should align to the right side.\n   */\n  right: PropTypes.bool,\n  /**\n   * Whether the dropdown menu should appear above the dropdown button\n   * instead of below.\n   */\n  up: PropTypes.bool,\n  /**\n   * Whether the dropdown menu can be activated when the cursor\n   * hovers above the button without clicking.\n   */\n  hoverable: PropTypes.bool,\n  /**\n   * A string, or a react component that displays the label of the dropdown\n   * button. if not set it will be use the selected Dropdown.Item or the first one\n   * if there is no selected\n   */\n  label: PropTypes.node,\n  /**\n   * Whether the dropdown menu should be closed when a dropdown item is selected.\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * A react component that draws the icon of the dropdown button.\n   * Usually it is an arrow (or a chevron) pointing downwards (or upwards).\n   */\n  icon: PropTypes.node,\n  /**\n   * Specify the id of the menu component.\n   * Default is \"dropdown-menu\".\n   */\n  menuId: PropTypes.string,\n};\n\nDropdown.defaultProps = {\n  closeOnSelect: true,\n  menuId: 'dropdown-menu',\n};\n\nexport default Dropdown;\n"],"file":"dropdown.js"}